//#include <iostream>
//using namespace std;
//
////20.06.03
////반년 넘게 문제 이해를 잘못해서 못품. 점수10에서 5칸갈때 일직선으로 가는게 아니라 반드시 골지점으로 꺾음. 다른데도 마찬가지
//
//int Array[10];
//int visit[33];
//int h[4];
//int ans;
//int table[] =
//{
//	0, 2, 4, 6, 8, 10, //0 ~ 5
//	12, 14, 16, 18, 20, // 6 ~ 10
//	22, 24, 26, 28, 30, // 11 ~ 15
//	32, 34, 36, 38, 40, // 16 ~ 20
//	13, 16, 19, 25, 26, // 21 ~ 25
//	27, 28, 22, 24, 30, //26 ~ 30
//	35, 0 // 31 ~ 32
//};
//
//int next_idx[33][5] =
//{
//	{ 1, 2, 3, 4, 5 },
//	{ 2, 3, 4, 5, 6 },
//	{ 3, 4, 5, 6, 7 },
//	{ 4, 5, 6, 7, 8 },
//	{ 5, 6, 7, 8, 9 },
//	{ 21, 22, 23, 24, 30 },
//	{ 7, 8, 9, 10, 11 },
//	{ 8, 9, 10, 11, 12 },
//	{ 9, 10, 11, 12, 13 },
//	{ 10, 11, 12, 13, 14 },
//	{ 28, 29, 24, 30, 31 },
//	{ 12, 13, 14, 15, 16 },
//	{ 13, 14, 15, 16, 17 },
//	{ 14, 15, 16, 17, 18 },
//	{ 15, 16, 17, 18, 19 },
//	{ 27, 26, 25, 24, 30 },
//	{ 17, 18, 19, 20, 32 },
//	{ 18, 19, 20, 32, 32 },
//	{ 19, 20, 32, 32, 32 },
//	{ 20, 32, 32, 32 ,32 },
//	{ 32, 32, 32, 32, 32 },
//	{ 22, 23, 24, 30, 31 },
//	{ 23, 24, 30, 31, 20 },
//	{ 24, 30, 31, 20, 32 },
//	{ 30, 31, 20, 32, 32 },
//	{ 24, 30, 31, 20, 32 },
//	{ 25, 24, 30, 31, 20 },
//	{ 26, 25, 24, 30, 31 },
//	{ 29, 24, 30, 31, 20 },
//	{ 24, 30, 31, 20, 32 },
//	{ 31, 20, 32, 32, 32 },
//	{ 20, 32, 32, 32, 32 },
//	{ 32, 32, 32, 32, 32 }
//};
//
//void input()
//{
//	for (int i = 0; i < 10; i++)
//	{
//		cin >> Array[i];
//		Array[i]--; // table 인덱스 0 부터 이용
//	}
//}
//
//int calcul(int cur, int X)
//{
//	return next_idx[cur][X];
//}
//
//void DFS(int idx, int score)
//{
//	visit[32] = false; //마지막 칸은 항상 올 수 있게 비워두기
//	if (idx == 10)
//	{
//		if (ans < score) ans = score;
//		return;
//	}
//
//	for (int i = 0; i < 4; i++)
//	{
//		if (h[i] != 32) //마지막 칸에 있으면 선택 안함
//		{
//			int next = calcul(h[i], Array[idx]); //이동할 위치 구하기
//			int temp = h[i];
//			if (visit[next] == false)
//			{
//				visit[temp] = false; //말 움직이므로 기존 자리 비워주기
//				visit[next] = true; //이동할 곳 표시
//				h[i] = next;
//				DFS(idx + 1, score + table[next]);
//				visit[next] = false;
//				visit[temp] = true; //기존 자리 표시
//				h[i] = temp;
//			}
//		}
//	}
//}
//
//void solve()
//{
//	DFS(0, 0);
//
//	cout << ans;
//}
//
//int main()
//{
//	input();
//	solve();
//	return 0;
//}